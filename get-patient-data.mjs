import { ajax } from 'rxjs/ajax'
import fs from 'fs'
import xhr2 from 'xhr2'
import { from, map, delay, concatMap } from 'rxjs'
import * as dotenv from 'dotenv'
global.XMLHttpRequest = xhr2
dotenv.config()

const URL = `${process.env.BASE_URL}patient/`

const patientId = [
    15927, 15926, 15925, 15924, 15923, 15922, 15921, 15920, 15919, 15918, 15917,
    15916, 15915, 15914, 15913, 15912, 15911, 15910, 15909, 15908, 15907, 15906,
    15905, 15904, 15903, 15902, 15901, 15900, 15899, 15898, 15897, 15896, 15895,
    15894, 15893, 15892, 15891, 15890, 15889, 15888, 15887, 15886, 15885, 15884,
    15883, 15882, 15881, 15880, 15879, 15878, 15877, 15876, 15875, 15874, 15873,
    15872, 15871, 15870, 15869, 15864, 15863, 15862, 15861, 15860, 15859, 15858,
    15857, 15856, 15855, 15854, 15853, 15852, 15851, 15850, 15849, 15848, 15847,
    15846, 15845, 15844, 15843, 15842, 15841, 15840, 15839, 15838, 15837, 15836,
    15835, 15834, 15833, 15832, 15831, 15830, 15829, 15828, 15827, 15826, 15825,
    15824, 15823, 15822, 15821, 15820, 15819, 15818, 15817, 15816, 15815, 15814,
    15813, 15812, 15811, 15810, 15809, 15808, 15807, 15806, 15805, 15804, 15803,
    15802, 15801, 15800, 15799, 15798, 15797, 15796, 15795, 15794, 15793, 15792,
    15791, 15790, 15789, 15788, 15787, 15786, 15785, 15784, 15783, 15782, 15781,
    15780, 15779, 15778, 15777, 15776, 15775, 15774, 15773, 15772, 15771, 15770,
    15769, 15768, 15767, 15766, 15765, 15764, 15763, 15762, 15761, 15760, 15759,
    15758, 15757, 15756, 15755, 15754, 15753, 15752, 15750, 15748, 15747, 15744,
    15742, 15741, 15740, 15739, 15738, 15737, 15736, 15735, 15734, 15733, 15732,
    15731, 15730, 15729, 15728, 15727, 15726, 15725, 15724, 15723, 15722, 15721,
    15720, 15719, 15718, 15717, 15716, 15715, 15714, 15713, 15712, 15711, 15710,
    15709, 15708, 15707, 15706, 15705, 15704, 15703, 15702, 15699, 15698, 15697,
    15696, 15695, 15694, 15693, 15692, 15691, 15690, 15689, 15688, 15687, 15686,
    15685, 15684, 15683, 15682, 15681, 15680, 15679, 15678, 15677, 15676, 15675,
    15674, 15673, 15672, 15671, 15670, 15669, 15668, 15667, 15666, 15665, 15664,
    15663, 15662, 15661, 15660, 15659, 15658, 15657, 15656, 15655, 15654, 15653,
    15652, 15651, 15650, 15649, 15648, 15647, 15646, 15645, 15644, 15643, 15642,
    15641, 15640, 15639, 15638, 15637, 15636, 15635, 15634, 15633, 15632, 15631,
    15630, 15629, 15628, 15627, 15626, 15625, 15624, 15623, 15622, 15621, 15620,
    15619, 15618, 15617, 15616, 15615, 15614, 15613, 15612, 15611, 15610, 15609,
    15608, 15607, 15606, 15605, 15604, 15603, 15602, 15601, 15600, 15599, 15598,
    15597, 15596, 15595, 15594, 15593, 15592, 15591, 15590, 15589, 15588, 15587,
    15586, 15585, 15584, 15583, 15582, 15581, 15580, 15579, 15578, 15577, 15576,
    15575, 15574, 15573, 15572, 15571, 15570, 15569, 15568, 15567, 15566, 15565,
    15564, 15563, 15562, 15561, 15560, 15559, 15558, 15557, 15556, 15555, 15554,
    15553, 15552, 15551, 15550, 15549, 15548, 15547, 15546, 15545, 15544, 15543,
    15542, 15541, 15540, 15539, 15538, 15537, 15536, 15535, 15534, 15533, 15532,
    15531, 15530, 15529, 15528, 15527, 15526, 15525, 15524, 15523, 15522, 15521,
    15520, 15519, 15518, 15517, 15516, 15515, 15514, 15513, 15512, 15511, 15510,
    15509, 15508, 15507, 15506, 15502, 15500, 15501, 15499, 15498, 15497, 15496,
    15495, 15494, 15493, 15492, 15491, 15490, 15489, 15488, 15487, 15486, 15485,
    15484, 15483, 15482, 15481, 15480, 15479, 15469, 15468, 15467, 15466, 15465,
    15464, 15463, 15462, 15461, 15460, 15459, 15458, 15455, 15454, 15453, 15452,
    15451, 15450, 15449, 15448, 15447, 15446, 15445, 15444, 15443, 15442, 15441,
    15440, 15438, 15437, 15436, 15435, 15434, 15433, 15432, 15431, 15430, 15429,
    15428, 15427, 15426, 15424, 15423, 15422, 15421, 15420, 15419, 15418, 15417,
    15416, 15415, 15414, 15413, 15412, 15411, 15410, 15407, 15406, 15405, 15404,
    15403, 15402, 15401, 15400, 15399,
]

const patientData$ = from(patientId).pipe(
    concatMap((id) =>
        ajax({
            url: `${URL}${id}`,
            method: 'Get',
            headers: {
                'Content-Type': 'application/json',
                authorization: process.env.TOKEN,
            },
        }).pipe(delay(1000))
    ),
    map((data) => data['response']),
    map((patient) => {
        return {
            id: patient['id'],
            name: patient['name'],
            telephone: patient['telephone'],
            address: patient['address'],
            created_at: patient['created_at'],
            operations: patient['operations'],
        }
    })
)

patientData$.subscribe((result) => {
    try {
        const writeStream = fs.createWriteStream('test.ndjson', { flags: 'a' })
        writeStream.write(`${JSON.stringify(result)} \r\n`)
    } catch (error) {
        console.log(error)
    }
})
